{"mappings":"qhBAsDA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAWC,SAASC,cAAc,QAClCC,EAAaF,SAASC,cAAc,mBACpCE,EAAYH,SAASC,cAAc,kBACnCG,EAAcJ,SAASC,cAAc,mBACrCI,EAAWL,SAASC,cAAc,UACxC,IAAIK,EAAQ,KACRC,EAAO,KACPC,EAAS,KAoCb,SAASC,EAAcC,EAAUC,GAE/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAGpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CA7CbZ,EAASqB,iBAAiB,SAI1B,WACEd,GAASJ,EAAWmB,MACpBC,QAAQC,IAAIjB,GACZC,GAAQJ,EAAUkB,MAClBC,QAAQC,IAAIhB,GACZC,GAAUJ,EAAYiB,MACtBC,QAAQC,IAAIf,E,IATdT,EAASqB,iBAAiB,UAY1B,SAAwBI,GACtBA,EAAEC,gB,IAZJpB,EAASe,iBAAiB,SAe1B,WACA,IAAI,IAAIM,EAAI,EAAGA,GAAKlB,EAAQkB,GAAI,EAC9BjB,EAAciB,EAAGpB,GAChBqB,MAAK,EAACjB,SAAEA,EAAUS,MAAAS,MACjBC,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAqBrB,QAAiBkB,MAAU,IAEzEI,OAAM,EAACtB,SAAEA,EAAUS,MAAAc,MAClBJ,EAAAhC,GAASiC,OAAOI,QAAQ,sBAAoBxB,QAAeuB,MAAU,IAEvE3B,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// // Get form element\n// const formRef = document.querySelector('.form');\n\n// // Set event listener submit on form\n// formRef.addEventListener('submit', onSubmitForm);\n\n// // Submit form\n// function onSubmitForm(e) {\n//   e.preventDefault();\n\n//   let delay = Number(formRef.delay.value);\n\n//   for (let i = 1; i <= formRef.amount.value; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     delay += Number(formRef.step.value);\n//   }\n// }\n\n// // Create promise\n// function createPromise(position, delay) {\n//   const obj = { position, delay };\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         // Fulfill\n//         resolve(obj);\n//       } else {\n//         // Reject\n//         reject(obj);\n//       }\n//     }, delay);\n//   });\n// }\n\n\nimport Notiflix from 'notiflix';\n\nconst inputRef = document.querySelector('form')\nconst inputDelay = document.querySelector('[ name=\"delay\"]')\nconst inputStep = document.querySelector('[ name=\"step\"]')\nconst inputAmount = document.querySelector('[name=\"amount\"]')\nconst btnStart = document.querySelector('button')\nlet delay = null;\nlet step = null;\nlet amount = null;\n\n\n\ninputRef.addEventListener('input', onFormInput)\ninputRef.addEventListener('submit', preventDefault)\nbtnStart.addEventListener('click', onBtnStartClick)\n\nfunction onFormInput(){\n  delay = +inputDelay.value;\n  console.log(delay)\n  step = +inputStep.value;\n  console.log(step);\n  amount = +inputAmount.value;\n  console.log(amount)\n}\n\nfunction preventDefault(e){\n  e.preventDefault();\n}\n\nfunction onBtnStartClick(){\nfor(let i = 1; i <= amount; i +=1){\n  createPromise(i, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  delay += step\n}\n\n\n}\n\nfunction createPromise(position, delay) {\n\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n      \n        resolve({ position, delay });\n      } else {\n       \n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$inputRef","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$btnStart","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","value","console","log","e","preventDefault","i","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.6762dab1.js.map"}